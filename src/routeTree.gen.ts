/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as CustomQueryIndexImport } from './routes/custom-query/index'
import { Route as ContainerIndexImport } from './routes/container/index'
import { Route as CustomQueryCustomQueryNameImport } from './routes/custom-query/$customQueryName'
import { Route as ContainerFormImport } from './routes/container/form'
import { Route as ContainerContainerNameIndexImport } from './routes/container/$containerName/index'
import { Route as ContainerContainerNameSearchImport } from './routes/container/$containerName/search'
import { Route as ContainerContainerNameAnnotationFormImport } from './routes/container/$containerName/annotation/form'
import { Route as ContainerContainerNameAnnotationAnnotationNameImport } from './routes/container/$containerName/annotation/$annotationName'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CustomQueryIndexRoute = CustomQueryIndexImport.update({
  id: '/custom-query/',
  path: '/custom-query/',
  getParentRoute: () => rootRoute,
} as any)

const ContainerIndexRoute = ContainerIndexImport.update({
  id: '/container/',
  path: '/container/',
  getParentRoute: () => rootRoute,
} as any)

const CustomQueryCustomQueryNameRoute = CustomQueryCustomQueryNameImport.update(
  {
    id: '/custom-query/$customQueryName',
    path: '/custom-query/$customQueryName',
    getParentRoute: () => rootRoute,
  } as any,
)

const ContainerFormRoute = ContainerFormImport.update({
  id: '/container/form',
  path: '/container/form',
  getParentRoute: () => rootRoute,
} as any)

const ContainerContainerNameIndexRoute =
  ContainerContainerNameIndexImport.update({
    id: '/container/$containerName/',
    path: '/container/$containerName/',
    getParentRoute: () => rootRoute,
  } as any)

const ContainerContainerNameSearchRoute =
  ContainerContainerNameSearchImport.update({
    id: '/container/$containerName/search',
    path: '/container/$containerName/search',
    getParentRoute: () => rootRoute,
  } as any)

const ContainerContainerNameAnnotationFormRoute =
  ContainerContainerNameAnnotationFormImport.update({
    id: '/container/$containerName/annotation/form',
    path: '/container/$containerName/annotation/form',
    getParentRoute: () => rootRoute,
  } as any)

const ContainerContainerNameAnnotationAnnotationNameRoute =
  ContainerContainerNameAnnotationAnnotationNameImport.update({
    id: '/container/$containerName/annotation/$annotationName',
    path: '/container/$containerName/annotation/$annotationName',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/container/form': {
      id: '/container/form'
      path: '/container/form'
      fullPath: '/container/form'
      preLoaderRoute: typeof ContainerFormImport
      parentRoute: typeof rootRoute
    }
    '/custom-query/$customQueryName': {
      id: '/custom-query/$customQueryName'
      path: '/custom-query/$customQueryName'
      fullPath: '/custom-query/$customQueryName'
      preLoaderRoute: typeof CustomQueryCustomQueryNameImport
      parentRoute: typeof rootRoute
    }
    '/container/': {
      id: '/container/'
      path: '/container'
      fullPath: '/container'
      preLoaderRoute: typeof ContainerIndexImport
      parentRoute: typeof rootRoute
    }
    '/custom-query/': {
      id: '/custom-query/'
      path: '/custom-query'
      fullPath: '/custom-query'
      preLoaderRoute: typeof CustomQueryIndexImport
      parentRoute: typeof rootRoute
    }
    '/container/$containerName/search': {
      id: '/container/$containerName/search'
      path: '/container/$containerName/search'
      fullPath: '/container/$containerName/search'
      preLoaderRoute: typeof ContainerContainerNameSearchImport
      parentRoute: typeof rootRoute
    }
    '/container/$containerName/': {
      id: '/container/$containerName/'
      path: '/container/$containerName'
      fullPath: '/container/$containerName'
      preLoaderRoute: typeof ContainerContainerNameIndexImport
      parentRoute: typeof rootRoute
    }
    '/container/$containerName/annotation/$annotationName': {
      id: '/container/$containerName/annotation/$annotationName'
      path: '/container/$containerName/annotation/$annotationName'
      fullPath: '/container/$containerName/annotation/$annotationName'
      preLoaderRoute: typeof ContainerContainerNameAnnotationAnnotationNameImport
      parentRoute: typeof rootRoute
    }
    '/container/$containerName/annotation/form': {
      id: '/container/$containerName/annotation/form'
      path: '/container/$containerName/annotation/form'
      fullPath: '/container/$containerName/annotation/form'
      preLoaderRoute: typeof ContainerContainerNameAnnotationFormImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/container/form': typeof ContainerFormRoute
  '/custom-query/$customQueryName': typeof CustomQueryCustomQueryNameRoute
  '/container': typeof ContainerIndexRoute
  '/custom-query': typeof CustomQueryIndexRoute
  '/container/$containerName/search': typeof ContainerContainerNameSearchRoute
  '/container/$containerName': typeof ContainerContainerNameIndexRoute
  '/container/$containerName/annotation/$annotationName': typeof ContainerContainerNameAnnotationAnnotationNameRoute
  '/container/$containerName/annotation/form': typeof ContainerContainerNameAnnotationFormRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/container/form': typeof ContainerFormRoute
  '/custom-query/$customQueryName': typeof CustomQueryCustomQueryNameRoute
  '/container': typeof ContainerIndexRoute
  '/custom-query': typeof CustomQueryIndexRoute
  '/container/$containerName/search': typeof ContainerContainerNameSearchRoute
  '/container/$containerName': typeof ContainerContainerNameIndexRoute
  '/container/$containerName/annotation/$annotationName': typeof ContainerContainerNameAnnotationAnnotationNameRoute
  '/container/$containerName/annotation/form': typeof ContainerContainerNameAnnotationFormRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/container/form': typeof ContainerFormRoute
  '/custom-query/$customQueryName': typeof CustomQueryCustomQueryNameRoute
  '/container/': typeof ContainerIndexRoute
  '/custom-query/': typeof CustomQueryIndexRoute
  '/container/$containerName/search': typeof ContainerContainerNameSearchRoute
  '/container/$containerName/': typeof ContainerContainerNameIndexRoute
  '/container/$containerName/annotation/$annotationName': typeof ContainerContainerNameAnnotationAnnotationNameRoute
  '/container/$containerName/annotation/form': typeof ContainerContainerNameAnnotationFormRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/container/form'
    | '/custom-query/$customQueryName'
    | '/container'
    | '/custom-query'
    | '/container/$containerName/search'
    | '/container/$containerName'
    | '/container/$containerName/annotation/$annotationName'
    | '/container/$containerName/annotation/form'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/container/form'
    | '/custom-query/$customQueryName'
    | '/container'
    | '/custom-query'
    | '/container/$containerName/search'
    | '/container/$containerName'
    | '/container/$containerName/annotation/$annotationName'
    | '/container/$containerName/annotation/form'
  id:
    | '__root__'
    | '/'
    | '/container/form'
    | '/custom-query/$customQueryName'
    | '/container/'
    | '/custom-query/'
    | '/container/$containerName/search'
    | '/container/$containerName/'
    | '/container/$containerName/annotation/$annotationName'
    | '/container/$containerName/annotation/form'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContainerFormRoute: typeof ContainerFormRoute
  CustomQueryCustomQueryNameRoute: typeof CustomQueryCustomQueryNameRoute
  ContainerIndexRoute: typeof ContainerIndexRoute
  CustomQueryIndexRoute: typeof CustomQueryIndexRoute
  ContainerContainerNameSearchRoute: typeof ContainerContainerNameSearchRoute
  ContainerContainerNameIndexRoute: typeof ContainerContainerNameIndexRoute
  ContainerContainerNameAnnotationAnnotationNameRoute: typeof ContainerContainerNameAnnotationAnnotationNameRoute
  ContainerContainerNameAnnotationFormRoute: typeof ContainerContainerNameAnnotationFormRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContainerFormRoute: ContainerFormRoute,
  CustomQueryCustomQueryNameRoute: CustomQueryCustomQueryNameRoute,
  ContainerIndexRoute: ContainerIndexRoute,
  CustomQueryIndexRoute: CustomQueryIndexRoute,
  ContainerContainerNameSearchRoute: ContainerContainerNameSearchRoute,
  ContainerContainerNameIndexRoute: ContainerContainerNameIndexRoute,
  ContainerContainerNameAnnotationAnnotationNameRoute:
    ContainerContainerNameAnnotationAnnotationNameRoute,
  ContainerContainerNameAnnotationFormRoute:
    ContainerContainerNameAnnotationFormRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/container/form",
        "/custom-query/$customQueryName",
        "/container/",
        "/custom-query/",
        "/container/$containerName/search",
        "/container/$containerName/",
        "/container/$containerName/annotation/$annotationName",
        "/container/$containerName/annotation/form"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/container/form": {
      "filePath": "container/form.tsx"
    },
    "/custom-query/$customQueryName": {
      "filePath": "custom-query/$customQueryName.tsx"
    },
    "/container/": {
      "filePath": "container/index.tsx"
    },
    "/custom-query/": {
      "filePath": "custom-query/index.tsx"
    },
    "/container/$containerName/search": {
      "filePath": "container/$containerName/search.tsx"
    },
    "/container/$containerName/": {
      "filePath": "container/$containerName/index.tsx"
    },
    "/container/$containerName/annotation/$annotationName": {
      "filePath": "container/$containerName/annotation/$annotationName.tsx"
    },
    "/container/$containerName/annotation/form": {
      "filePath": "container/$containerName/annotation/form.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
